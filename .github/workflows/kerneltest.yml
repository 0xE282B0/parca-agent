name: Kerneltest

on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - main
      - release-*

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idconcurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  # renovate: datasource=go depName=github.com/goreleaser/goreleaser
  GORELEASER_VERSION: v1.23.0
  # renovate: datasource=github-releases depName=kubernetes/minikube extractVersion=^v(?<version>.+)$
  MINIKUBE_VERSION: 1.32.0
  # renovate: datasource=go depName=github.com/florianl/bluebox
  BLUEBOX_VERSION: v0.0.1

jobs:
  skip-check:
    name: Skip check
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should_skip }}
    permissions:
      actions: write
      contents: read
    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
        with:
          do_not_skip: '["schedule", "workflow_dispatch"]'
          paths: |-
            [
              "**.go",
              ".dockerignore",
              ".github/workflows/kerneltest.yml",
              "3rdparty",
              "Dockerfile*",
              "Makefile",
              "bpf/**",
              "deploy/**",
              "e2e/**",
              "test/kernel/vmtest.sh",
              "go.mod",
              "go.sum"
            ]
          skip_after_successful_duplicate: false

  build-dependencies:
    name: Build and download dependencies
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - name: Check out the code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Install devbox
        uses: jetpack-io/devbox-install-action@v0.7.0
        with:
          enable-cache: true

      - name: Set up Go tool cache
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            ~/.devbox/go
          key: devbox-go-tools.cache-${{ runner.arch }}-${{ hashFiles('install-tools.sh') }}
          restore-keys: |
            devbox-go-tools.cache-${{ runner.arch }}
            devbox-go-tools.cache-

      - name: Setup devbox
        run: devbox run -- echo "done!"

      - name: Load devbox shellenv
        uses: HatsuneMiku3939/direnv-action@v1
        with:
          direnvVersion: 2.32.3

      - name: Initialize and update libbpf submodule
        run: git submodule init && git submodule update

      - name: Build BPF
        run: |
          make ARCH=amd64 bpf
          make ARCH=arm64 bpf

      - uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: ebpf-object-file-container
          path: bpf/out
          if-no-files-found: error

      - name: Validate
        uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
        with:
          distribution: goreleaser
          version: ${{ env.GORELEASER_VERSION }}
          args: check

  build-binaries:
    name: Build binaries using goreleaser
    runs-on: ubuntu-latest
    needs: build-dependencies
    container:
      image: docker.io/goreleaser/goreleaser-cross:v1.21.5@sha256:3427076d3799c1cf4507f14c6f44f21de7c1ae598ebb7dcd14757959f246dedf
      options: --privileged
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      # https://github.com/actions/checkout/issues/766
      - name: Add repository directory to the git global config as a safe directory
        run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - name: Set Tag
        run: |
          echo "goreleaser_current_tag=`git describe --match 'v*' --tags`" >> $GITHUB_ENV

      - name: Install devbox
        uses: jetpack-io/devbox-install-action@v0.7.0
        with:
          enable-cache: true

      - name: Set up Go tool cache
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            ~/.devbox/go
          key: devbox-go-tools.cache-${{ runner.arch }}-${{ hashFiles('install-tools.sh') }}
          restore-keys: |
            devbox-go-tools.cache-${{ runner.arch }}
            devbox-go-tools.cache-

      - name: Setup devbox
        run: devbox run -- echo "done!"

      - name: Load devbox shellenv
        uses: HatsuneMiku3939/direnv-action@v1
        with:
          direnvVersion: 2.32.3

      - name: Initialize and update libbpf submodule
        run: git submodule init && git submodule update

      - name: Install libbpf dependencies
        run: |
          apt-get update -y
          apt-get install -yq lld libelf-dev zlib1g-dev libelf-dev:arm64 zlib1g-dev:arm64 pkg-config

      - name: Get branch name
        shell: bash
        run: echo "GITHUB_BRANCH_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ebpf-object-file-container
          path: bpf/out

      - name: List downloaded files
        shell: bash
        run: |
          ls -lR bpf
          mkdir -p pkg/profiler/cpu/bpf/programs/objects
          cp -r bpf/out/* pkg/profiler/cpu/bpf/programs/objects
          rm pkg/profiler/cpu/bpf/programs/objects/*/pid_namespace.bpf.o
          mkdir -p pkg/contained/bpf
          cp -r bpf/out/* pkg/contained/bpf
          find pkg/contained/bpf/*/ -type f | grep -v "pid_namespace.bpf.o" | xargs -I{} bash -c "rm {}"

      - name: Run Goreleaser
        run: goreleaser release --clean --skip=validate --skip=publish --snapshot --debug -f .goreleaser-test-binaries.yml
        env:
          GORELEASER_CURRENT_TAG: "${{ env.goreleaser_current_tag }}"

      - name: Archive generated artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: parca-agent-dist-container
          if-no-files-found: error
          path: |
            goreleaser/dist
            !goreleaser/dist/*.txt

  run-test/kernel:
    name: Run test/kernel
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      # The "dist" path intended here is parca-agent/dist, not goreleaser/dist
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: parca-agent-dist-container
          path: dist

      - name: Install devbox
        uses: jetpack-io/devbox-install-action@v0.7.0
        with:
          enable-cache: true

      - name: Set up Go tool cache
        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: |
            ~/.devbox/go
          key: devbox-go-tools.cache-${{ runner.arch }}-${{ hashFiles('install-tools.sh') }}
          restore-keys: |
            devbox-go-tools.cache-${{ runner.arch }}
            devbox-go-tools.cache-

      - name: Setup devbox
        run: devbox run -- echo "done!"

      - name: Load devbox shellenv
        uses: HatsuneMiku3939/direnv-action@v1
        with:
          direnvVersion: 2.32.3

      - name: List downloaded files
        shell: bash
        run: |
          ls -lR dist

      # TODO(sylfrena): add this step as a target in Makefile for local dev
      - name: Build initramfs
        run: |
          # Copy amd64 test
          cp ./dist/parca-agent-test-amd64_linux_amd64_v1/test/kernel/cpu.test ./test/kernel/amd64/cpu.test

          # Copy arm64 test
          cp ./dist/parca-agent-test-arm64_linux_arm64/test/kernel/cpu.test ./test/kernel/arm64/cpu.test

          go install "github.com/florianl/bluebox@${BLUEBOX_VERSION}"
          echo $PATH

          chmod +x test/kernel/amd64/cpu.test
          chmod +x test/kernel/arm64/cpu.test

          bluebox -e test/kernel/amd64/cpu.test -o test/kernel/amd64/amd64-initramfs.cpio
          bluebox -a arm64 -e test/kernel/arm64/cpu.test -o test/kernel/arm64/arm64-initramfs.cpio

      - name: Run vmtests
        run: ./test/kernel/vmtest.sh
